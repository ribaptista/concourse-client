// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import atc "github.com/concourse/atc"
import concourse "github.com/concourse/go-concourse/concourse"
import http "net/http"
import io "io"
import mock "github.com/stretchr/testify/mock"
import time "time"

// Client is an autogenerated mock type for the Client type
type Client struct {
	mock.Mock
}

// AbortBuild provides a mock function with given fields: buildID
func (_m *Client) AbortBuild(buildID string) error {
	ret := _m.Called(buildID)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(buildID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Build provides a mock function with given fields: buildID
func (_m *Client) Build(buildID string) (atc.Build, bool, error) {
	ret := _m.Called(buildID)

	var r0 atc.Build
	if rf, ok := ret.Get(0).(func(string) atc.Build); ok {
		r0 = rf(buildID)
	} else {
		r0 = ret.Get(0).(atc.Build)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(buildID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(buildID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildEvents provides a mock function with given fields: buildID
func (_m *Client) BuildEvents(buildID string) (concourse.Events, error) {
	ret := _m.Called(buildID)

	var r0 concourse.Events
	if rf, ok := ret.Get(0).(func(string) concourse.Events); ok {
		r0 = rf(buildID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(concourse.Events)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(buildID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// BuildPlan provides a mock function with given fields: buildID
func (_m *Client) BuildPlan(buildID int) (atc.PublicBuildPlan, bool, error) {
	ret := _m.Called(buildID)

	var r0 atc.PublicBuildPlan
	if rf, ok := ret.Get(0).(func(int) atc.PublicBuildPlan); ok {
		r0 = rf(buildID)
	} else {
		r0 = ret.Get(0).(atc.PublicBuildPlan)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(buildID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(buildID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildResources provides a mock function with given fields: buildID
func (_m *Client) BuildResources(buildID int) (atc.BuildInputsOutputs, bool, error) {
	ret := _m.Called(buildID)

	var r0 atc.BuildInputsOutputs
	if rf, ok := ret.Get(0).(func(int) atc.BuildInputsOutputs); ok {
		r0 = rf(buildID)
	} else {
		r0 = ret.Get(0).(atc.BuildInputsOutputs)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(int) bool); ok {
		r1 = rf(buildID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(buildID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Builds provides a mock function with given fields: _a0
func (_m *Client) Builds(_a0 concourse.Page) ([]atc.Build, concourse.Pagination, error) {
	ret := _m.Called(_a0)

	var r0 []atc.Build
	if rf, ok := ret.Get(0).(func(concourse.Page) []atc.Build); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Build)
		}
	}

	var r1 concourse.Pagination
	if rf, ok := ret.Get(1).(func(concourse.Page) concourse.Pagination); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Get(1).(concourse.Pagination)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(concourse.Page) error); ok {
		r2 = rf(_a0)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetCLIReader provides a mock function with given fields: arch, platform
func (_m *Client) GetCLIReader(arch string, platform string) (io.ReadCloser, http.Header, error) {
	ret := _m.Called(arch, platform)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(string, string) io.ReadCloser); ok {
		r0 = rf(arch, platform)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 http.Header
	if rf, ok := ret.Get(1).(func(string, string) http.Header); ok {
		r1 = rf(arch, platform)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(http.Header)
		}
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(arch, platform)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetInfo provides a mock function with given fields:
func (_m *Client) GetInfo() (atc.Info, error) {
	ret := _m.Called()

	var r0 atc.Info
	if rf, ok := ret.Get(0).(func() atc.Info); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(atc.Info)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HTTPClient provides a mock function with given fields:
func (_m *Client) HTTPClient() *http.Client {
	ret := _m.Called()

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// ListPipelines provides a mock function with given fields:
func (_m *Client) ListPipelines() ([]atc.Pipeline, error) {
	ret := _m.Called()

	var r0 []atc.Pipeline
	if rf, ok := ret.Get(0).(func() []atc.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListTeams provides a mock function with given fields:
func (_m *Client) ListTeams() ([]atc.Team, error) {
	ret := _m.Called()

	var r0 []atc.Team
	if rf, ok := ret.Get(0).(func() []atc.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Team)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListWorkers provides a mock function with given fields:
func (_m *Client) ListWorkers() ([]atc.Worker, error) {
	ret := _m.Called()

	var r0 []atc.Worker
	if rf, ok := ret.Get(0).(func() []atc.Worker); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PruneWorker provides a mock function with given fields: workerName
func (_m *Client) PruneWorker(workerName string) error {
	ret := _m.Called(workerName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(workerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReadOutputFromBuildPlan provides a mock function with given fields: buildID, planID
func (_m *Client) ReadOutputFromBuildPlan(buildID int, planID atc.PlanID) (io.ReadCloser, bool, error) {
	ret := _m.Called(buildID, planID)

	var r0 io.ReadCloser
	if rf, ok := ret.Get(0).(func(int, atc.PlanID) io.ReadCloser); ok {
		r0 = rf(buildID, planID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(int, atc.PlanID) bool); ok {
		r1 = rf(buildID, planID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(int, atc.PlanID) error); ok {
		r2 = rf(buildID, planID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SaveWorker provides a mock function with given fields: _a0, _a1
func (_m *Client) SaveWorker(_a0 atc.Worker, _a1 *time.Duration) (*atc.Worker, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *atc.Worker
	if rf, ok := ret.Get(0).(func(atc.Worker, *time.Duration) *atc.Worker); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*atc.Worker)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(atc.Worker, *time.Duration) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendInputToBuildPlan provides a mock function with given fields: buildID, planID, src
func (_m *Client) SendInputToBuildPlan(buildID int, planID atc.PlanID, src io.Reader) (bool, error) {
	ret := _m.Called(buildID, planID, src)

	var r0 bool
	if rf, ok := ret.Get(0).(func(int, atc.PlanID, io.Reader) bool); ok {
		r0 = rf(buildID, planID, src)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(int, atc.PlanID, io.Reader) error); ok {
		r1 = rf(buildID, planID, src)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Team provides a mock function with given fields: teamName
func (_m *Client) Team(teamName string) concourse.Team {
	ret := _m.Called(teamName)

	var r0 concourse.Team
	if rf, ok := ret.Get(0).(func(string) concourse.Team); ok {
		r0 = rf(teamName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(concourse.Team)
		}
	}

	return r0
}

// URL provides a mock function with given fields:
func (_m *Client) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}
