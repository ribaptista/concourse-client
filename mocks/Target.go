// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import concourse "github.com/concourse/go-concourse/concourse"
import mock "github.com/stretchr/testify/mock"
import rc "github.com/concourse/fly/rc"
import tls "crypto/tls"

// Target is an autogenerated mock type for the Target type
type Target struct {
	mock.Mock
}

// CACert provides a mock function with given fields:
func (_m *Target) CACert() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Client provides a mock function with given fields:
func (_m *Target) Client() concourse.Client {
	ret := _m.Called()

	var r0 concourse.Client
	if rf, ok := ret.Get(0).(func() concourse.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(concourse.Client)
		}
	}

	return r0
}

// IsWorkerVersionCompatible provides a mock function with given fields: _a0
func (_m *Target) IsWorkerVersionCompatible(_a0 string) (bool, error) {
	ret := _m.Called(_a0)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(_a0)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TLSConfig provides a mock function with given fields:
func (_m *Target) TLSConfig() *tls.Config {
	ret := _m.Called()

	var r0 *tls.Config
	if rf, ok := ret.Get(0).(func() *tls.Config); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*tls.Config)
		}
	}

	return r0
}

// Team provides a mock function with given fields:
func (_m *Target) Team() concourse.Team {
	ret := _m.Called()

	var r0 concourse.Team
	if rf, ok := ret.Get(0).(func() concourse.Team); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(concourse.Team)
		}
	}

	return r0
}

// Token provides a mock function with given fields:
func (_m *Target) Token() *rc.TargetToken {
	ret := _m.Called()

	var r0 *rc.TargetToken
	if rf, ok := ret.Get(0).(func() *rc.TargetToken); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*rc.TargetToken)
		}
	}

	return r0
}

// TokenAuthorization provides a mock function with given fields:
func (_m *Target) TokenAuthorization() (string, bool) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func() bool); ok {
		r1 = rf()
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// URL provides a mock function with given fields:
func (_m *Target) URL() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Validate provides a mock function with given fields:
func (_m *Target) Validate() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateWithWarningOnly provides a mock function with given fields:
func (_m *Target) ValidateWithWarningOnly() error {
	ret := _m.Called()

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Version provides a mock function with given fields:
func (_m *Target) Version() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// WorkerVersion provides a mock function with given fields:
func (_m *Target) WorkerVersion() (string, error) {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
