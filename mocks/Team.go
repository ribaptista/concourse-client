// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import atc "github.com/concourse/atc"
import concourse "github.com/concourse/go-concourse/concourse"
import mock "github.com/stretchr/testify/mock"

// Team is an autogenerated mock type for the Team type
type Team struct {
	mock.Mock
}

// BuildInputsForJob provides a mock function with given fields: pipelineName, jobName
func (_m *Team) BuildInputsForJob(pipelineName string, jobName string) ([]atc.BuildInput, bool, error) {
	ret := _m.Called(pipelineName, jobName)

	var r0 []atc.BuildInput
	if rf, ok := ret.Get(0).(func(string, string) []atc.BuildInput); ok {
		r0 = rf(pipelineName, jobName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.BuildInput)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(pipelineName, jobName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(pipelineName, jobName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Builds provides a mock function with given fields: page
func (_m *Team) Builds(page concourse.Page) ([]atc.Build, concourse.Pagination, error) {
	ret := _m.Called(page)

	var r0 []atc.Build
	if rf, ok := ret.Get(0).(func(concourse.Page) []atc.Build); ok {
		r0 = rf(page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Build)
		}
	}

	var r1 concourse.Pagination
	if rf, ok := ret.Get(1).(func(concourse.Page) concourse.Pagination); ok {
		r1 = rf(page)
	} else {
		r1 = ret.Get(1).(concourse.Pagination)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(concourse.Page) error); ok {
		r2 = rf(page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildsWithVersionAsInput provides a mock function with given fields: pipelineName, resourceName, resourceVersionID
func (_m *Team) BuildsWithVersionAsInput(pipelineName string, resourceName string, resourceVersionID int) ([]atc.Build, bool, error) {
	ret := _m.Called(pipelineName, resourceName, resourceVersionID)

	var r0 []atc.Build
	if rf, ok := ret.Get(0).(func(string, string, int) []atc.Build); ok {
		r0 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Build)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, int) bool); ok {
		r1 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// BuildsWithVersionAsOutput provides a mock function with given fields: pipelineName, resourceName, resourceVersionID
func (_m *Team) BuildsWithVersionAsOutput(pipelineName string, resourceName string, resourceVersionID int) ([]atc.Build, bool, error) {
	ret := _m.Called(pipelineName, resourceName, resourceVersionID)

	var r0 []atc.Build
	if rf, ok := ret.Get(0).(func(string, string, int) []atc.Build); ok {
		r0 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Build)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, int) bool); ok {
		r1 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, int) error); ok {
		r2 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// CheckResource provides a mock function with given fields: pipelineName, resourceName, version
func (_m *Team) CheckResource(pipelineName string, resourceName string, version atc.Version) (bool, error) {
	ret := _m.Called(pipelineName, resourceName, version)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, atc.Version) bool); ok {
		r0 = rf(pipelineName, resourceName, version)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, atc.Version) error); ok {
		r1 = rf(pipelineName, resourceName, version)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CheckResourceType provides a mock function with given fields: pipelineName, resourceTypeName
func (_m *Team) CheckResourceType(pipelineName string, resourceTypeName string) (bool, error) {
	ret := _m.Called(pipelineName, resourceTypeName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pipelineName, resourceTypeName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, resourceTypeName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ClearTaskCache provides a mock function with given fields: pipelineName, jobName, stepName, cachePath
func (_m *Team) ClearTaskCache(pipelineName string, jobName string, stepName string, cachePath string) (int64, error) {
	ret := _m.Called(pipelineName, jobName, stepName, cachePath)

	var r0 int64
	if rf, ok := ret.Get(0).(func(string, string, string, string) int64); ok {
		r0 = rf(pipelineName, jobName, stepName, cachePath)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string, string) error); ok {
		r1 = rf(pipelineName, jobName, stepName, cachePath)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateBuild provides a mock function with given fields: plan
func (_m *Team) CreateBuild(plan atc.Plan) (atc.Build, error) {
	ret := _m.Called(plan)

	var r0 atc.Build
	if rf, ok := ret.Get(0).(func(atc.Plan) atc.Build); ok {
		r0 = rf(plan)
	} else {
		r0 = ret.Get(0).(atc.Build)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(atc.Plan) error); ok {
		r1 = rf(plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateJobBuild provides a mock function with given fields: pipelineName, jobName
func (_m *Team) CreateJobBuild(pipelineName string, jobName string) (atc.Build, error) {
	ret := _m.Called(pipelineName, jobName)

	var r0 atc.Build
	if rf, ok := ret.Get(0).(func(string, string) atc.Build); ok {
		r0 = rf(pipelineName, jobName)
	} else {
		r0 = ret.Get(0).(atc.Build)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, jobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateOrUpdate provides a mock function with given fields: team
func (_m *Team) CreateOrUpdate(team atc.Team) (atc.Team, bool, bool, error) {
	ret := _m.Called(team)

	var r0 atc.Team
	if rf, ok := ret.Get(0).(func(atc.Team) atc.Team); ok {
		r0 = rf(team)
	} else {
		r0 = ret.Get(0).(atc.Team)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(atc.Team) bool); ok {
		r1 = rf(team)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(atc.Team) bool); ok {
		r2 = rf(team)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(atc.Team) error); ok {
		r3 = rf(team)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CreateOrUpdatePipelineConfig provides a mock function with given fields: pipelineName, configVersion, passedConfig, checkCredentials
func (_m *Team) CreateOrUpdatePipelineConfig(pipelineName string, configVersion string, passedConfig []byte, checkCredentials bool) (bool, bool, []concourse.ConfigWarning, error) {
	ret := _m.Called(pipelineName, configVersion, passedConfig, checkCredentials)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, []byte, bool) bool); ok {
		r0 = rf(pipelineName, configVersion, passedConfig, checkCredentials)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, []byte, bool) bool); ok {
		r1 = rf(pipelineName, configVersion, passedConfig, checkCredentials)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 []concourse.ConfigWarning
	if rf, ok := ret.Get(2).(func(string, string, []byte, bool) []concourse.ConfigWarning); ok {
		r2 = rf(pipelineName, configVersion, passedConfig, checkCredentials)
	} else {
		if ret.Get(2) != nil {
			r2 = ret.Get(2).([]concourse.ConfigWarning)
		}
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, []byte, bool) error); ok {
		r3 = rf(pipelineName, configVersion, passedConfig, checkCredentials)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// CreatePipelineBuild provides a mock function with given fields: pipelineName, plan
func (_m *Team) CreatePipelineBuild(pipelineName string, plan atc.Plan) (atc.Build, error) {
	ret := _m.Called(pipelineName, plan)

	var r0 atc.Build
	if rf, ok := ret.Get(0).(func(string, atc.Plan) atc.Build); ok {
		r0 = rf(pipelineName, plan)
	} else {
		r0 = ret.Get(0).(atc.Build)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, atc.Plan) error); ok {
		r1 = rf(pipelineName, plan)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeletePipeline provides a mock function with given fields: pipelineName
func (_m *Team) DeletePipeline(pipelineName string) (bool, error) {
	ret := _m.Called(pipelineName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pipelineName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DestroyTeam provides a mock function with given fields: teamName
func (_m *Team) DestroyTeam(teamName string) error {
	ret := _m.Called(teamName)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(teamName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DisableResourceVersion provides a mock function with given fields: pipelineName, resourceName, resourceVersionID
func (_m *Team) DisableResourceVersion(pipelineName string, resourceName string, resourceVersionID int) (bool, error) {
	ret := _m.Called(pipelineName, resourceName, resourceVersionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// EnableResourceVersion provides a mock function with given fields: pipelineName, resourceName, resourceVersionID
func (_m *Team) EnableResourceVersion(pipelineName string, resourceName string, resourceVersionID int) (bool, error) {
	ret := _m.Called(pipelineName, resourceName, resourceVersionID)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string, int) bool); ok {
		r0 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, int) error); ok {
		r1 = rf(pipelineName, resourceName, resourceVersionID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ExposePipeline provides a mock function with given fields: pipelineName
func (_m *Team) ExposePipeline(pipelineName string) (bool, error) {
	ret := _m.Called(pipelineName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pipelineName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// HidePipeline provides a mock function with given fields: pipelineName
func (_m *Team) HidePipeline(pipelineName string) (bool, error) {
	ret := _m.Called(pipelineName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pipelineName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Job provides a mock function with given fields: pipelineName, jobName
func (_m *Team) Job(pipelineName string, jobName string) (atc.Job, bool, error) {
	ret := _m.Called(pipelineName, jobName)

	var r0 atc.Job
	if rf, ok := ret.Get(0).(func(string, string) atc.Job); ok {
		r0 = rf(pipelineName, jobName)
	} else {
		r0 = ret.Get(0).(atc.Job)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(pipelineName, jobName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(pipelineName, jobName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobBuild provides a mock function with given fields: pipelineName, jobName, buildName
func (_m *Team) JobBuild(pipelineName string, jobName string, buildName string) (atc.Build, bool, error) {
	ret := _m.Called(pipelineName, jobName, buildName)

	var r0 atc.Build
	if rf, ok := ret.Get(0).(func(string, string, string) atc.Build); ok {
		r0 = rf(pipelineName, jobName, buildName)
	} else {
		r0 = ret.Get(0).(atc.Build)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string, string) bool); ok {
		r1 = rf(pipelineName, jobName, buildName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string, string) error); ok {
		r2 = rf(pipelineName, jobName, buildName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// JobBuilds provides a mock function with given fields: pipelineName, jobName, page
func (_m *Team) JobBuilds(pipelineName string, jobName string, page concourse.Page) ([]atc.Build, concourse.Pagination, bool, error) {
	ret := _m.Called(pipelineName, jobName, page)

	var r0 []atc.Build
	if rf, ok := ret.Get(0).(func(string, string, concourse.Page) []atc.Build); ok {
		r0 = rf(pipelineName, jobName, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Build)
		}
	}

	var r1 concourse.Pagination
	if rf, ok := ret.Get(1).(func(string, string, concourse.Page) concourse.Pagination); ok {
		r1 = rf(pipelineName, jobName, page)
	} else {
		r1 = ret.Get(1).(concourse.Pagination)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string, string, concourse.Page) bool); ok {
		r2 = rf(pipelineName, jobName, page)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, concourse.Page) error); ok {
		r3 = rf(pipelineName, jobName, page)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// ListContainers provides a mock function with given fields: queryList
func (_m *Team) ListContainers(queryList map[string]string) ([]atc.Container, error) {
	ret := _m.Called(queryList)

	var r0 []atc.Container
	if rf, ok := ret.Get(0).(func(map[string]string) []atc.Container); ok {
		r0 = rf(queryList)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Container)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(map[string]string) error); ok {
		r1 = rf(queryList)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListJobs provides a mock function with given fields: pipelineName
func (_m *Team) ListJobs(pipelineName string) ([]atc.Job, error) {
	ret := _m.Called(pipelineName)

	var r0 []atc.Job
	if rf, ok := ret.Get(0).(func(string) []atc.Job); ok {
		r0 = rf(pipelineName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Job)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListPipelines provides a mock function with given fields:
func (_m *Team) ListPipelines() ([]atc.Pipeline, error) {
	ret := _m.Called()

	var r0 []atc.Pipeline
	if rf, ok := ret.Get(0).(func() []atc.Pipeline); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Pipeline)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListVolumes provides a mock function with given fields:
func (_m *Team) ListVolumes() ([]atc.Volume, error) {
	ret := _m.Called()

	var r0 []atc.Volume
	if rf, ok := ret.Get(0).(func() []atc.Volume); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Volume)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Name provides a mock function with given fields:
func (_m *Team) Name() string {
	ret := _m.Called()

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// OrderingPipelines provides a mock function with given fields: pipelineNames
func (_m *Team) OrderingPipelines(pipelineNames []string) error {
	ret := _m.Called(pipelineNames)

	var r0 error
	if rf, ok := ret.Get(0).(func([]string) error); ok {
		r0 = rf(pipelineNames)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PauseJob provides a mock function with given fields: pipelineName, jobName
func (_m *Team) PauseJob(pipelineName string, jobName string) (bool, error) {
	ret := _m.Called(pipelineName, jobName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pipelineName, jobName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, jobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PausePipeline provides a mock function with given fields: pipelineName
func (_m *Team) PausePipeline(pipelineName string) (bool, error) {
	ret := _m.Called(pipelineName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pipelineName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PauseResource provides a mock function with given fields: pipelineName, resourceName
func (_m *Team) PauseResource(pipelineName string, resourceName string) (bool, error) {
	ret := _m.Called(pipelineName, resourceName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pipelineName, resourceName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Pipeline provides a mock function with given fields: name
func (_m *Team) Pipeline(name string) (atc.Pipeline, bool, error) {
	ret := _m.Called(name)

	var r0 atc.Pipeline
	if rf, ok := ret.Get(0).(func(string) atc.Pipeline); ok {
		r0 = rf(name)
	} else {
		r0 = ret.Get(0).(atc.Pipeline)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// PipelineBuilds provides a mock function with given fields: pipelineName, page
func (_m *Team) PipelineBuilds(pipelineName string, page concourse.Page) ([]atc.Build, concourse.Pagination, bool, error) {
	ret := _m.Called(pipelineName, page)

	var r0 []atc.Build
	if rf, ok := ret.Get(0).(func(string, concourse.Page) []atc.Build); ok {
		r0 = rf(pipelineName, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.Build)
		}
	}

	var r1 concourse.Pagination
	if rf, ok := ret.Get(1).(func(string, concourse.Page) concourse.Pagination); ok {
		r1 = rf(pipelineName, page)
	} else {
		r1 = ret.Get(1).(concourse.Pagination)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string, concourse.Page) bool); ok {
		r2 = rf(pipelineName, page)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, concourse.Page) error); ok {
		r3 = rf(pipelineName, page)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// PipelineConfig provides a mock function with given fields: pipelineName
func (_m *Team) PipelineConfig(pipelineName string) (atc.Config, atc.RawConfig, string, bool, error) {
	ret := _m.Called(pipelineName)

	var r0 atc.Config
	if rf, ok := ret.Get(0).(func(string) atc.Config); ok {
		r0 = rf(pipelineName)
	} else {
		r0 = ret.Get(0).(atc.Config)
	}

	var r1 atc.RawConfig
	if rf, ok := ret.Get(1).(func(string) atc.RawConfig); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Get(1).(atc.RawConfig)
	}

	var r2 string
	if rf, ok := ret.Get(2).(func(string) string); ok {
		r2 = rf(pipelineName)
	} else {
		r2 = ret.Get(2).(string)
	}

	var r3 bool
	if rf, ok := ret.Get(3).(func(string) bool); ok {
		r3 = rf(pipelineName)
	} else {
		r3 = ret.Get(3).(bool)
	}

	var r4 error
	if rf, ok := ret.Get(4).(func(string) error); ok {
		r4 = rf(pipelineName)
	} else {
		r4 = ret.Error(4)
	}

	return r0, r1, r2, r3, r4
}

// RenamePipeline provides a mock function with given fields: pipelineName, name
func (_m *Team) RenamePipeline(pipelineName string, name string) (bool, error) {
	ret := _m.Called(pipelineName, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pipelineName, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RenameTeam provides a mock function with given fields: teamName, name
func (_m *Team) RenameTeam(teamName string, name string) (bool, error) {
	ret := _m.Called(teamName, name)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(teamName, name)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(teamName, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Resource provides a mock function with given fields: pipelineName, resourceName
func (_m *Team) Resource(pipelineName string, resourceName string) (atc.Resource, bool, error) {
	ret := _m.Called(pipelineName, resourceName)

	var r0 atc.Resource
	if rf, ok := ret.Get(0).(func(string, string) atc.Resource); ok {
		r0 = rf(pipelineName, resourceName)
	} else {
		r0 = ret.Get(0).(atc.Resource)
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string, string) bool); ok {
		r1 = rf(pipelineName, resourceName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string, string) error); ok {
		r2 = rf(pipelineName, resourceName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// ResourceVersions provides a mock function with given fields: pipelineName, resourceName, page
func (_m *Team) ResourceVersions(pipelineName string, resourceName string, page concourse.Page) ([]atc.VersionedResource, concourse.Pagination, bool, error) {
	ret := _m.Called(pipelineName, resourceName, page)

	var r0 []atc.VersionedResource
	if rf, ok := ret.Get(0).(func(string, string, concourse.Page) []atc.VersionedResource); ok {
		r0 = rf(pipelineName, resourceName, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]atc.VersionedResource)
		}
	}

	var r1 concourse.Pagination
	if rf, ok := ret.Get(1).(func(string, string, concourse.Page) concourse.Pagination); ok {
		r1 = rf(pipelineName, resourceName, page)
	} else {
		r1 = ret.Get(1).(concourse.Pagination)
	}

	var r2 bool
	if rf, ok := ret.Get(2).(func(string, string, concourse.Page) bool); ok {
		r2 = rf(pipelineName, resourceName, page)
	} else {
		r2 = ret.Get(2).(bool)
	}

	var r3 error
	if rf, ok := ret.Get(3).(func(string, string, concourse.Page) error); ok {
		r3 = rf(pipelineName, resourceName, page)
	} else {
		r3 = ret.Error(3)
	}

	return r0, r1, r2, r3
}

// UnpauseJob provides a mock function with given fields: pipelineName, jobName
func (_m *Team) UnpauseJob(pipelineName string, jobName string) (bool, error) {
	ret := _m.Called(pipelineName, jobName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pipelineName, jobName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, jobName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpausePipeline provides a mock function with given fields: pipelineName
func (_m *Team) UnpausePipeline(pipelineName string) (bool, error) {
	ret := _m.Called(pipelineName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string) bool); ok {
		r0 = rf(pipelineName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UnpauseResource provides a mock function with given fields: pipelineName, resourceName
func (_m *Team) UnpauseResource(pipelineName string, resourceName string) (bool, error) {
	ret := _m.Called(pipelineName, resourceName)

	var r0 bool
	if rf, ok := ret.Get(0).(func(string, string) bool); ok {
		r0 = rf(pipelineName, resourceName)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(pipelineName, resourceName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// VersionedResourceTypes provides a mock function with given fields: pipelineName
func (_m *Team) VersionedResourceTypes(pipelineName string) (atc.VersionedResourceTypes, bool, error) {
	ret := _m.Called(pipelineName)

	var r0 atc.VersionedResourceTypes
	if rf, ok := ret.Get(0).(func(string) atc.VersionedResourceTypes); ok {
		r0 = rf(pipelineName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(atc.VersionedResourceTypes)
		}
	}

	var r1 bool
	if rf, ok := ret.Get(1).(func(string) bool); ok {
		r1 = rf(pipelineName)
	} else {
		r1 = ret.Get(1).(bool)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(string) error); ok {
		r2 = rf(pipelineName)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}
